<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:c="http://www.springframework.org/schema/c"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">


    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <entry key="java.net.SocketAddress"
                       value="org.apache.mina.integration.beans.InetSocketAddressEditor">
                </entry>
            </map>
        </property>
    </bean>



    <bean id="ioAcceptor" class="org.apache.mina.transport.socket.nio.NioSocketAcceptor"
          init-method="bind" destroy-method="unbind">
        <!--端口号-->
        <property name="defaultLocalAddress" value=":8888"/>
        <!--绑定自己实现的handler-->
        <property name="handler" ref="serverHandler"/>
        <!--声明过滤器的集合-->
        <property name="filterChainBuilder" ref="filterChainBuilder"/>
        <property name="reuseAddress" value="true"/>
    </bean>

    <bean id="initServer" class="com.test.server.InitMinaServer">
        <constructor-arg type="org.apache.mina.transport.socket.nio.NioSocketAcceptor" ref="ioAcceptor">
        </constructor-arg>
    </bean>


    <bean id="filterChainBuilder"
          class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
        <property name="filters">
            <map>
                <!--mina自带的线程池filter-->
                <entry key="executor" value-ref="executorFilter"/>
                <entry key="mdcInjectionFilter" value-ref="mdcInjectionFilter"/>
                <!--自己实现的编解码器filter-->
                <entry key="codecFilter" value-ref="codecFilter"/>
                <!--日志的filter-->
                <entry key="loggingFilter" value-ref="loggingFilter"/>
                <!--心跳filter-->
               <!-- <entry key="keepAliveFilter" value-ref="keepAliveFilter"/>-->
            </map>
        </property>
    </bean>
    <!-- executorFilter多线程处理 -->
    <bean id="executorFilter" class="org.apache.mina.filter.executor.ExecutorFilter"/>
    <bean id="mdcInjectionFilter" class="org.apache.mina.filter.logging.MdcInjectionFilter">
        <constructor-arg value="remoteAddress"/>
    </bean>

    <!--日志-->
    <bean id="loggingFilter" class="org.apache.mina.filter.logging.LoggingFilter"/>

    <!--编解码-->
    <bean id="codecFilter" class="org.apache.mina.filter.codec.ProtocolCodecFilter">
    <constructor-arg>
        <bean class="com.test.server.MyCodeFactory"></bean>
    </constructor-arg>
    </bean>

  <!--  <bean id="codecFilter" class="org.apache.mina.filter.codec.ProtocolCodecFilter">
    <constructor-arg>
        <bean class="org.apache.mina.filter.codec.serialization.ObjectSerializationCodecFactory"></bean>
    </constructor-arg>
    </bean>-->

    <!--心跳检测filter-->
    <bean id="keepAliveFilter" class="org.apache.mina.filter.keepalive.KeepAliveFilter">
        <!--构造函数的第一个参数传入自己实现的工厂-->
        <constructor-arg>
            <bean class="com.test.server.MyKeepAliveMessageFactory"></bean>
        </constructor-arg>
        <!--第二个参数需要的是IdleStatus对象，value值设置为读写空闲-->
        <constructor-arg type="org.apache.mina.core.session.IdleStatus" value="BOTH_IDLE">
        </constructor-arg>
        <!--心跳频率，不设置则默认60s  -->
        <property name="requestInterval" value="5"/>
        <!--心跳超时时间，不设置则默认30s    -->
        <property name="requestTimeout" value="100000"/>
        <!--不设置默认false-->
        <property name="forwardEvent" value="true"/>
    </bean>
    <!--自己实现的handler-->
    <bean id="serverHandler" class="com.test.server.MyHandler">
        <property name="minaServer" ref="minaServer" />
    </bean>

    <bean id="minaServer" class="com.test.server.MinaServer">
    </bean>

</beans>